read_num:
        pusha
        mov word[num], 0
        loop_read:
                mov eax, 3
                mov ebx, 0
                mov ecx, temp
                mov edx, 1
                int 80h


                cmp byte[temp], 10
                je end_read

                mov ax, word[num]
                mov bx, 10
                mul bx
                mov bl, byte[temp]
                sub bl, 30h
                mov bh, 0
                add ax, bx
                mov word[num], ax
        jmp loop_read

        end_read:

                popa
                ret

read_array:
        pusha
        read_loop:
        cmp eax ,dword[n]
        je end_read_arr
        call read_num

        mov cx , word[num]
        mov word[ebx + 2 * eax] , cx

        inc eax
        jmp read_loop
        end_read_arr:
        popa
        ret

print_num:
mov byte[count],0
pusha
extract_no:
inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
cmp ax , 0
je print_no
mov word[num], ax
jmp extract_no
print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no
end_print:
mov eax,4
mov ebx,1
mov ecx,newline
mov edx,1
int 80h
popa
ret

print_array:
pusha
print_loop:
cmp eax,dword[n]
je end_print1
mov cx,word[ebx+2*eax]
mov word[num],cx
call print_num
inc eax
jmp print_loop
end_print1:
popa
ret
section .data
msg1: db "Enter size of the Array",0Ah
size1: equ $-msg1
msg2: db "Enter array elements",0Ah
size2: equ $-msg2
newline: db 10
freq_array: TIMES 100 dw 0
freq1 : dw 0
freq2 : dw 100
ans1  : dw 0
ans2  : dw 0
msg_e: db "Element with maximum Occurance: ",0Ah
size_e: equ $-msg_e
msg_o: db "Element with minimum occurance:",0Ah
size_o: equ $-msg_o

section .bss
count : resb 1
num   : resw 1
temp  : resb 1
num1  : resw 1
num2  : resd 1

n     : resd 10
array : resw 50
odd_array: resw 50
even_array: resw 50
k     : resw 1
num3  : resw 1

section .text
global _start:
_start:
mov eax,4
mov ebx,1
mov ecx,msg1
mov edx,size1
int 80h

 mov word[num] , 0
        call read_num
        mov ax , word[num]
      	mov word[n] , ax

	mov eax , 4
        mov ebx , 1
        mov ecx , msg2
        mov edx , size2
        int 80h
         mov ebx , array
        mov eax , 0
        call read_array
        
        mov eax,0
        mov dword[num2],0
for:
	mov eax,dword[num2]
	cmp eax,dword[n]
	je end_exit
	mov ebx,array
	mov cx,word[ebx+2*eax]
	mov word[num1],cx
	mov eax,0
	mov ax,word[num1]
	mov ebx,freq_array
	inc word[ebx+2*eax]
	inc dword[num2]
	jmp for
	
end_exit:
mov eax,0
mov ebx,freq_array
mov dword[n],100
mov dword[num2],0
for_loop2:
    mov eax,dword[num2]
	cmp eax,dword[n]
	je final_exit
	mov ebx ,freq_array
	mov cx,word[ebx+2*eax]
	;mov word[num],cx
   ; call print_num
	cmp cx,0
	je L1
	cmp cx,word[freq1]
	ja L2
again:
	cmp cx,word[freq2]
	jb L3
	inc dword[num2]
	jmp for_loop2
L1:
inc dword[num2]
jmp for_loop2
L2:
mov word[freq1],cx
mov ecx,dword[num2]
mov word[ans1],cx
mov cx,word[freq1]
jmp again
L3:
mov word[freq2],cx
mov ecx,dword[num2]
mov word[ans2],cx
inc dword[num2]
jmp for_loop2

final_exit:
mov eax,4
mov ebx,1
mov ecx,msg_e
mov edx,size_e
int 80h
mov cx,word[ans1]
mov word[num],cx
call print_num
mov eax,4
mov ebx,1
mov ecx,msg_o
mov edx,size_o
int 80h
mov cx,word[ans2]
mov word[num],cx
call print_num

mov eax,1
mov ebx,0
int 80h